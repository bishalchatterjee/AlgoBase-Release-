<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/theme_back">

    <ScrollView
        android:id="@+id/scrollView4"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="200dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        android:scrollbars="none"
        android:overScrollMode="never">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:fontFamily="@font/helveticabold"
                android:layout_marginTop="20dp"
                android:text="WHAT IS SEGMENT-TREE?"
                android:layout_marginStart="20dp"
                android:textColor="@color/theme_text"
                android:textIsSelectable="false"
                android:textSize="20dp" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="20dp"
                android:fontFamily="@font/helvetica"
                android:text="Representation of Segment trees  \n\n1. Leaf Nodes are the elements of the input array. \n\n 2. Each internal node represents some merging of the leaf nodes. \n\n\nThe merging may be different for different problems. For this problem, merging is sum of leaves under a node. An array representation of tree is used to represent Segment Trees. For each node at index i, the left child is at index 2*i+1, right child at 2*i+2 and the parent is at  [(i â€“ 1) / 2]. \n\n\nHow does above segment tree look in memory?
Like Heap, the segment tree is also represented as an array. The difference here is, it is not a complete binary tree. It is rather a full binary tree (every node has 0 or 2 children) and all levels are filled except possibly the last level. Unlike Heap, the last level may have gaps between nodes. \n\n\nBelow are the values in the segment tree array for the above diagram.
\n\n\nBelow is memory representation of segment tree for input array \n{1, 3, 5, 7, 9, 11}
\nst[] = {36, 9, 27, 4, 5, 16, 11, 1, 3, DUMMY, DUMMY, 7, 9, DUMMY, DUMMY}
\nThe dummy values are never accessed and have no use.\n\n\n This is some wastage of space due to simple array representation. We may optimize this wastage using some clever implementations, but code for sum and update becomes more complex."
                android:textColor="@color/theme_text"
                android:textIsSelectable="false"
                android:textSize="20dp" />



        </LinearLayout>
    </ScrollView>

    <ImageView
        android:id="@+id/imageView13"
        android:layout_width="310dp"
        android:layout_height="171dp"
        app:layout_constraintBottom_toTopOf="@+id/scrollView4"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.584"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="1.0"
        app:srcCompat="@drawable/segmenttrees_info_banner" />
</androidx.constraintlayout.widget.ConstraintLayout>